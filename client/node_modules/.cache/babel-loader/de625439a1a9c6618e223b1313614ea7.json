{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kasir\\\\OneDrive\\\\Documents\\\\srilatha kasireddy\\\\Quizme-frontend\\\\client\\\\src\\\\components\\\\Quiz.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\nimport jwt from \"jsonwebtoken\";\nimport \"./Quiz.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quiz() {\n  _s();\n\n  const navigate = useNavigate();\n  const location = useLocation(); // const quizData = location.state.quizData;\n\n  const quizId = location.state.quizId;\n  const [quesNumber, setQuesNumber] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  let score = 0;\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      const data = jwt.decode(token);\n\n      if (!data.email) {\n        localStorage.removeItem(\"token\");\n        navigate(\"/login\");\n      }\n\n      if (Date.now() > jwt.decode(token).exp * 1000) {\n        localStorage.removeItem(\"token\");\n        navigate(\"/login\");\n      }\n    } else {\n      localStorage.removeItem(\"token\");\n      navigate(\"/login\");\n    }\n  }, []);\n\n  function handleQuestionChange(event) {\n    event.preventDefault();\n\n    if (event.target.name === \"prev\" && quesNumber > 0) {\n      setQuesNumber(quesNumber - 1);\n    }\n\n    if (event.target.name === \"next\" && quesNumber < quizData.length - 1) {\n      setQuesNumber(quesNumber + 1);\n    }\n  }\n\n  function handleQuestionSubmit(event) {\n    setAnswers({ ...answers,\n      [quesNumber]: event.target.name\n    });\n  }\n\n  async function handleResult() {\n    let myScore = 0;\n    setLoading(true);\n    Object.keys(answers).map((answer, index) => {\n      Object.keys(quizData[index].correct_answers).map(correctAnswer => {\n        if (quizData[index].correct_answers[correctAnswer] === \"true\" && answers[answer] + \"_correct\" === correctAnswer) {\n          myScore += 1;\n        }\n      });\n    });\n    score = score + myScore;\n    const req = await fetch(\"http://localhost:5000/api/result\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        quizId: quizId,\n        score: score\n      })\n    });\n    const data = await req.json();\n    setLoading(false);\n\n    if (data.status === \"ok\") {\n      navigate({\n        pathname: \"/result\",\n        state: {\n          quizId: quizId\n        }\n      });\n    } else {\n      setError(true);\n      setErrorMsg(data.message);\n      return;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n      className: \"loader\",\n      type: \"Grid\",\n      color: \"#fff\",\n      height: 100,\n      width: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"heading\",\n        children: \"Quiz App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-form\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"prev\" // onClick={handleQuestionChange}\n            ,\n            className: \"prev-button\",\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"next\" // onClick={handleQuestionChange}\n            ,\n            className: \"next-button\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), quesNumber === quizData.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleResult,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quiz, \"ghx2G0U6XDKc3fRVHS8L85XQJnI=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/kasir/OneDrive/Documents/srilatha kasireddy/Quizme-frontend/client/src/components/Quiz.jsx"],"names":["React","useState","useEffect","useNavigate","useLocation","Loader","jwt","Quiz","navigate","location","quizId","state","quesNumber","setQuesNumber","answers","setAnswers","error","setError","errorMsg","setErrorMsg","loading","setLoading","score","token","localStorage","getItem","data","decode","email","removeItem","Date","now","exp","handleQuestionChange","event","preventDefault","target","name","quizData","length","handleQuestionSubmit","handleResult","myScore","Object","keys","map","answer","index","correct_answers","correctAnswer","req","fetch","method","headers","body","JSON","stringify","json","status","pathname","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport \"./Quiz.css\";\r\n\r\nfunction Quiz() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  // const quizData = location.state.quizData;\r\n \r\n  const quizId = location.state.quizId;\r\n  const [quesNumber, setQuesNumber] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n  const [error, setError] = useState(false);\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  let score = 0;\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      const data = jwt.decode(token);\r\n      if (!data.email) {\r\n        localStorage.removeItem(\"token\");\r\n        navigate(\"/login\");\r\n      }\r\n      if (Date.now() > jwt.decode(token).exp * 1000) {\r\n        localStorage.removeItem(\"token\");\r\n        navigate(\"/login\");\r\n      }\r\n    } else {\r\n      localStorage.removeItem(\"token\");\r\n      navigate(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  function handleQuestionChange(event) {\r\n    event.preventDefault();\r\n    if (event.target.name === \"prev\" && quesNumber > 0) {\r\n      setQuesNumber(quesNumber - 1);\r\n    }\r\n    if (event.target.name === \"next\" && quesNumber < quizData.length - 1) {\r\n      setQuesNumber(quesNumber + 1);\r\n    }\r\n  }\r\n\r\n  function handleQuestionSubmit(event) {\r\n    setAnswers({ ...answers, [quesNumber]: event.target.name });\r\n  }\r\n\r\n  async function handleResult() {\r\n    let myScore = 0;\r\n    setLoading(true);\r\n    Object.keys(answers).map((answer, index) => {\r\n      Object.keys(quizData[index].correct_answers).map((correctAnswer) => {\r\n        if (\r\n          quizData[index].correct_answers[correctAnswer] === \"true\" &&\r\n          answers[answer] + \"_correct\" === correctAnswer\r\n        ) {\r\n          myScore += 1;\r\n        }\r\n      });\r\n    });\r\n    score = score + myScore;\r\n\r\n    const req = await fetch(\"http://localhost:5000/api/result\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-auth-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({\r\n        quizId: quizId,\r\n        score: score,\r\n      }),\r\n    });\r\n\r\n    const data = await req.json();\r\n    setLoading(false);\r\n    if (data.status === \"ok\") {\r\n      navigate({\r\n        pathname: \"/result\",\r\n        state: { quizId: quizId },\r\n      });\r\n    } else {\r\n      setError(true);\r\n      setErrorMsg(data.message);\r\n      return;\r\n    }\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n       \r\n      {loading ? (\r\n        <Loader\r\n          className=\"loader\"\r\n          type=\"Grid\"\r\n          color=\"#fff\"\r\n          height={100}\r\n          width={100}\r\n        />\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"heading\">Quiz App</h1>\r\n          <div className=\"question-form\">\r\n            {/* <div className=\"question\">\r\n              {quesNumber + 1}. {quizData[quesNumber].question}\r\n            </div> */}\r\n            {/* {Object.keys(quizData[quesNumber].answers).map((key) => {\r\n              if (quizData[quesNumber].answers[key] !== null)\r\n                return (\r\n                  <div className=\"option\" key={key}>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name={key}\r\n                      value={quizData[quesNumber].answers[key]}\r\n                      checked={answers[quesNumber] === key}\r\n                      onChange={handleQuestionSubmit}\r\n                    />\r\n                    <label htmlFor={key}>\r\n                      {quizData[quesNumber].answers[key]}\r\n                    </label>\r\n                  </div>\r\n                );\r\n            })} */}\r\n            <div className=\"btns\">\r\n              <button\r\n                name=\"prev\"\r\n                // onClick={handleQuestionChange}\r\n                className=\"prev-button\"\r\n              >\r\n                Previous\r\n              </button>\r\n              <button\r\n                name=\"next\"\r\n                // onClick={handleQuestionChange}\r\n                className=\"next-button\"\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n            {/* {error && <div className=\"error\">{errorMsg}</div>} */}\r\n          </div>\r\n          {quesNumber === quizData.length - 1 && (\r\n            <button className=\"submit-button\" onClick={handleResult}>\r\n              Submit\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n        }\r\nexport default Quiz;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}