{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import Loader from \"react-loader-spinner\";\n// import jwt from \"jsonwebtoken\";\n// import \"./Quiz.css\";\n// function Quiz() {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const quizData = location.state.quizData;\n//   const quizId = location.state.quizId;\n//   const [quesNumber, setQuesNumber] = useState(0);\n//   const [answers, setAnswers] = useState({});\n//   const [error, setError] = useState(false);\n//   const [errorMsg, setErrorMsg] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   let score = 0;\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//       const data = jwt.decode(token);\n//       if (!data.email) {\n//         localStorage.removeItem(\"token\");\n//         navigate(\"/login\");\n//       }\n//       if (Date.now() > jwt.decode(token).exp * 1000) {\n//         localStorage.removeItem(\"token\");\n//         navigate(\"/login\");\n//       }\n//     } else {\n//       localStorage.removeItem(\"token\");\n//       navigate(\"/login\");\n//     }\n//   }, []);\n//   function handleQuestionChange(event) {\n//     event.preventDefault();\n//     if (event.target.name === \"prev\" && quesNumber > 0) {\n//       setQuesNumber(quesNumber - 1);\n//     }\n//     if (event.target.name === \"next\" && quesNumber < quizData.length - 1) {\n//       setQuesNumber(quesNumber + 1);\n//     }\n//   }\n//   function handleQuestionSubmit(event) {\n//     setAnswers({ ...answers, [quesNumber]: event.target.name });\n//   }\n//   async function handleResult() {\n//     let myScore = 0;\n//     setLoading(true);\n//     Object.keys(answers).map((answer, index) => {\n//       Object.keys(quizData[index].correct_answers).map((correctAnswer) => {\n//         if (\n//           quizData[index].correct_answers[correctAnswer] === \"true\" &&\n//           answers[answer] + \"_correct\" === correctAnswer\n//         ) {\n//           myScore += 1;\n//         }\n//       });\n//     });\n//     score = score + myScore;\n//     const req = await fetch(\"http://localhost:5000/api/result\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"x-auth-token\": localStorage.getItem(\"token\"),\n//       },\n//       body: JSON.stringify({\n//         quizId: quizId,\n//         score: score,\n//       }),\n//     });\n//     const data = await req.json();\n//     setLoading(false);\n//     if (data.status === \"ok\") {\n//       navigate({\n//         pathname: \"/result\",\n//         state: { quizId: quizId },\n//       });\n//     } else {\n//       setError(true);\n//       setErrorMsg(data.message);\n//       return;\n//     }\n//   }\n//   return (\n//     <div>\n//       {loading ? (\n//         <Loader\n//           className=\"loader\"\n//           type=\"Grid\"\n//           color=\"#fff\"\n//           height={100}\n//           width={100}\n//         />\n//       ) : (\n//         <div>\n//           <h1 className=\"heading\">Quiz App</h1>\n//           <div className=\"question-form\">\n//             <div className=\"question\">\n//               {quesNumber + 1}. {quizData[quesNumber].question}\n//             </div>\n//             {Object.keys(quizData[quesNumber].answers).map((key) => {\n//               if (quizData[quesNumber].answers[key] !== null)\n//                 return (\n//                   <div className=\"option\" key={key}>\n//                     <input\n//                       type=\"radio\"\n//                       name={key}\n//                       value={quizData[quesNumber].answers[key]}\n//                       checked={answers[quesNumber] === key}\n//                       onChange={handleQuestionSubmit}\n//                     />\n//                     <label htmlFor={key}>\n//                       {quizData[quesNumber].answers[key]}\n//                     </label>\n//                   </div>\n//                 );\n//             })}\n//             <div className=\"btns\">\n//               <button\n//                 name=\"prev\"\n//                 onClick={handleQuestionChange}\n//                 className=\"prev-button\"\n//               >\n//                 Previous\n//               </button>\n//               <button\n//                 name=\"next\"\n//                 onClick={handleQuestionChange}\n//                 className=\"next-button\"\n//               >\n//                 Next\n//               </button>\n//             </div>\n//             {error && <div className=\"error\">{errorMsg}</div>}\n//           </div>\n//           {quesNumber === quizData.length - 1 && (\n//             <button className=\"submit-button\" onClick={handleResult}>\n//               Submit\n//             </button>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// export default Quiz;","map":{"version":3,"sources":["C:/Users/kasir/OneDrive/Documents/srilatha kasireddy/Quizme-frontend/client/src/components/Quiz.jsx"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import Loader from \"react-loader-spinner\";\r\n// import jwt from \"jsonwebtoken\";\r\n// import \"./Quiz.css\";\r\n\r\n// function Quiz() {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n//   const quizData = location.state.quizData;\r\n//   const quizId = location.state.quizId;\r\n//   const [quesNumber, setQuesNumber] = useState(0);\r\n//   const [answers, setAnswers] = useState({});\r\n//   const [error, setError] = useState(false);\r\n//   const [errorMsg, setErrorMsg] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n//   let score = 0;\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem(\"token\");\r\n//     if (token) {\r\n//       const data = jwt.decode(token);\r\n//       if (!data.email) {\r\n//         localStorage.removeItem(\"token\");\r\n//         navigate(\"/login\");\r\n//       }\r\n//       if (Date.now() > jwt.decode(token).exp * 1000) {\r\n//         localStorage.removeItem(\"token\");\r\n//         navigate(\"/login\");\r\n//       }\r\n//     } else {\r\n//       localStorage.removeItem(\"token\");\r\n//       navigate(\"/login\");\r\n//     }\r\n//   }, []);\r\n\r\n//   function handleQuestionChange(event) {\r\n//     event.preventDefault();\r\n//     if (event.target.name === \"prev\" && quesNumber > 0) {\r\n//       setQuesNumber(quesNumber - 1);\r\n//     }\r\n//     if (event.target.name === \"next\" && quesNumber < quizData.length - 1) {\r\n//       setQuesNumber(quesNumber + 1);\r\n//     }\r\n//   }\r\n\r\n//   function handleQuestionSubmit(event) {\r\n//     setAnswers({ ...answers, [quesNumber]: event.target.name });\r\n//   }\r\n\r\n//   async function handleResult() {\r\n//     let myScore = 0;\r\n//     setLoading(true);\r\n//     Object.keys(answers).map((answer, index) => {\r\n//       Object.keys(quizData[index].correct_answers).map((correctAnswer) => {\r\n//         if (\r\n//           quizData[index].correct_answers[correctAnswer] === \"true\" &&\r\n//           answers[answer] + \"_correct\" === correctAnswer\r\n//         ) {\r\n//           myScore += 1;\r\n//         }\r\n//       });\r\n//     });\r\n//     score = score + myScore;\r\n\r\n//     const req = await fetch(\"http://localhost:5000/api/result\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         \"x-auth-token\": localStorage.getItem(\"token\"),\r\n//       },\r\n//       body: JSON.stringify({\r\n//         quizId: quizId,\r\n//         score: score,\r\n//       }),\r\n//     });\r\n\r\n//     const data = await req.json();\r\n//     setLoading(false);\r\n//     if (data.status === \"ok\") {\r\n//       navigate({\r\n//         pathname: \"/result\",\r\n//         state: { quizId: quizId },\r\n//       });\r\n//     } else {\r\n//       setError(true);\r\n//       setErrorMsg(data.message);\r\n//       return;\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       {loading ? (\r\n//         <Loader\r\n//           className=\"loader\"\r\n//           type=\"Grid\"\r\n//           color=\"#fff\"\r\n//           height={100}\r\n//           width={100}\r\n//         />\r\n//       ) : (\r\n//         <div>\r\n//           <h1 className=\"heading\">Quiz App</h1>\r\n//           <div className=\"question-form\">\r\n//             <div className=\"question\">\r\n//               {quesNumber + 1}. {quizData[quesNumber].question}\r\n//             </div>\r\n//             {Object.keys(quizData[quesNumber].answers).map((key) => {\r\n//               if (quizData[quesNumber].answers[key] !== null)\r\n//                 return (\r\n//                   <div className=\"option\" key={key}>\r\n//                     <input\r\n//                       type=\"radio\"\r\n//                       name={key}\r\n//                       value={quizData[quesNumber].answers[key]}\r\n//                       checked={answers[quesNumber] === key}\r\n//                       onChange={handleQuestionSubmit}\r\n//                     />\r\n//                     <label htmlFor={key}>\r\n//                       {quizData[quesNumber].answers[key]}\r\n//                     </label>\r\n//                   </div>\r\n//                 );\r\n//             })}\r\n//             <div className=\"btns\">\r\n//               <button\r\n//                 name=\"prev\"\r\n//                 onClick={handleQuestionChange}\r\n//                 className=\"prev-button\"\r\n//               >\r\n//                 Previous\r\n//               </button>\r\n//               <button\r\n//                 name=\"next\"\r\n//                 onClick={handleQuestionChange}\r\n//                 className=\"next-button\"\r\n//               >\r\n//                 Next\r\n//               </button>\r\n//             </div>\r\n//             {error && <div className=\"error\">{errorMsg}</div>}\r\n//           </div>\r\n//           {quesNumber === quizData.length - 1 && (\r\n//             <button className=\"submit-button\" onClick={handleResult}>\r\n//               Submit\r\n//             </button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Quiz;\r\n"]},"metadata":{},"sourceType":"module"}