{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kasir\\\\OneDrive\\\\Documents\\\\srilatha kasireddy\\\\Quizme-frontend\\\\client\\\\src\\\\components\\\\Quiz.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import Loader from \"react-loader-spinner\";\n// import jwt from \"jsonwebtoken\";\n// import \"./Quiz.css\";\n// function Quiz() {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const quizData = location.state.quizData;\n//   const quizId = location.state.quizId;\n//   const [quesNumber, setQuesNumber] = useState(0);\n//   const [answers, setAnswers] = useState({});\n//   const [error, setError] = useState(false);\n//   const [errorMsg, setErrorMsg] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   let score = 0;\n//   useEffect(() => {\n//     const token = localStorage.getItem(\"token\");\n//     if (token) {\n//       const data = jwt.decode(token);\n//       if (!data.email) {\n//         localStorage.removeItem(\"token\");\n//         navigate(\"/login\");\n//       }\n//       if (Date.now() > jwt.decode(token).exp * 1000) {\n//         localStorage.removeItem(\"token\");\n//         navigate(\"/login\");\n//       }\n//     } else {\n//       localStorage.removeItem(\"token\");\n//       navigate(\"/login\");\n//     }\n//   }, []);\n//   function handleQuestionChange(event) {\n//     event.preventDefault();\n//     if (event.target.name === \"prev\" && quesNumber > 0) {\n//       setQuesNumber(quesNumber - 1);\n//     }\n//     if (event.target.name === \"next\" && quesNumber < quizData.length - 1) {\n//       setQuesNumber(quesNumber + 1);\n//     }\n//   }\n//   function handleQuestionSubmit(event) {\n//     setAnswers({ ...answers, [quesNumber]: event.target.name });\n//   }\n//   async function handleResult() {\n//     let myScore = 0;\n//     setLoading(true);\n//     Object.keys(answers).map((answer, index) => {\n//       Object.keys(quizData[index].correct_answers).map((correctAnswer) => {\n//         if (\n//           quizData[index].correct_answers[correctAnswer] === \"true\" &&\n//           answers[answer] + \"_correct\" === correctAnswer\n//         ) {\n//           myScore += 1;\n//         }\n//       });\n//     });\n//     score = score + myScore;\n//     const req = await fetch(\"http://localhost:5000/api/result\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"x-auth-token\": localStorage.getItem(\"token\"),\n//       },\n//       body: JSON.stringify({\n//         quizId: quizId,\n//         score: score,\n//       }),\n//     });\n//     const data = await req.json();\n//     setLoading(false);\n//     if (data.status === \"ok\") {\n//       navigate({\n//         pathname: \"/result\",\n//         state: { quizId: quizId },\n//       });\n//     } else {\n//       setError(true);\n//       setErrorMsg(data.message);\n//       return;\n//     }\n//   }\n//   return (\n//     <div>\n//       {loading ? (\n//         <Loader\n//           className=\"loader\"\n//           type=\"Grid\"\n//           color=\"#fff\"\n//           height={100}\n//           width={100}\n//         />\n//       ) : (\n//         <div>\n//           <h1 className=\"heading\">Quiz App</h1>\n//           <div className=\"question-form\">\n//             <div className=\"question\">\n//               {quesNumber + 1}. {quizData[quesNumber].question}\n//             </div>\n//             {Object.keys(quizData[quesNumber].answers).map((key) => {\n//               if (quizData[quesNumber].answers[key] !== null)\n//                 return (\n//                   <div className=\"option\" key={key}>\n//                     <input\n//                       type=\"radio\"\n//                       name={key}\n//                       value={quizData[quesNumber].answers[key]}\n//                       checked={answers[quesNumber] === key}\n//                       onChange={handleQuestionSubmit}\n//                     />\n//                     <label htmlFor={key}>\n//                       {quizData[quesNumber].answers[key]}\n//                     </label>\n//                   </div>\n//                 );\n//             })}\n//             <div className=\"btns\">\n//               <button\n//                 name=\"prev\"\n//                 onClick={handleQuestionChange}\n//                 className=\"prev-button\"\n//               >\n//                 Previous\n//               </button>\n//               <button\n//                 name=\"next\"\n//                 onClick={handleQuestionChange}\n//                 className=\"next-button\"\n//               >\n//                 Next\n//               </button>\n//             </div>\n//             {error && <div className=\"error\">{errorMsg}</div>}\n//           </div>\n//           {quesNumber === quizData.length - 1 && (\n//             <button className=\"submit-button\" onClick={handleResult}>\n//               Submit\n//             </button>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// export default Quiz;\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\nimport jwt from \"jsonwebtoken\";\nimport \"./Quiz.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quiz() {\n  _s();\n\n  const navigate = useNavigate();\n  const location = useLocation(); // const quizData = location.state.quizData;\n  // const quizId = location.state.quizId;\n\n  const quizData = location.state;\n  const quizId = location.state;\n  const [quesNumber, setQuesNumber] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  let score = 0;\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      const data = jwt.decode(token);\n\n      if (!data.email) {\n        localStorage.removeItem(\"token\");\n        navigate(\"/login\");\n      }\n\n      if (Date.now() > jwt.decode(token).exp * 1000) {\n        localStorage.removeItem(\"token\");\n        navigate(\"/login\");\n      }\n    } else {\n      localStorage.removeItem(\"token\");\n      navigate(\"/login\");\n    }\n  }, []);\n\n  function handleQuestionChange(event) {\n    event.preventDefault();\n\n    if (event.target.name === \"prev\" && quesNumber > 0) {\n      setQuesNumber(quesNumber - 1);\n    }\n\n    if (event.target.name === \"next\" && quesNumber < quizData.length - 1) {\n      setQuesNumber(quesNumber + 1);\n    }\n  }\n\n  function handleQuestionSubmit(event) {\n    setAnswers({ ...answers,\n      [quesNumber]: event.target.name\n    });\n  }\n\n  async function handleResult() {\n    const navigate = useNavigate;\n    let myScore = 0;\n    setLoading(true);\n    Object.keys(answers).map((answer, index) => {\n      Object.keys(quizData[index].correct_answers).map(correctAnswer => {\n        if (quizData[index].correct_answers[correctAnswer] === \"true\" && answers[answer] + \"_correct\" === correctAnswer) {\n          myScore += 1;\n        }\n      });\n    });\n    score = score + myScore;\n    const req = await fetch(\"http://localhost:5000/api/result\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        quizId: quizId,\n        score: score\n      })\n    });\n    const data = await req.json();\n    setLoading(false);\n\n    if (data.status === \"ok\") {\n      navigate({\n        pathname: \"/result\",\n        state: {\n          quizId: quizId\n        }\n      });\n    } else {\n      setError(true);\n      setErrorMsg(data.message);\n      return;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n      className: \"loader\",\n      type: \"Grid\",\n      color: \"#fff\",\n      height: 100,\n      width: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"heading\",\n        children: \"The Programmer's Quiz \\uD83D\\uDC69\\u200D\\uD83D\\uDCBB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question\",\n          children: [quesNumber + 1, \". \", quizData[quesNumber].question, console.log(quizData, \"hello\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), Object.keys(quizData[quesNumber].answers).map(key => {\n          if (quizData[quesNumber].answers[key] !== null) return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: key,\n              value: quizData[quesNumber].answers[key],\n              checked: answers[quesNumber] === key,\n              onChange: handleQuestionSubmit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: key,\n              children: quizData[quesNumber].answers[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 19\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"prev\",\n            onClick: handleQuestionChange,\n            className: \"prev-button\",\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"next\",\n            onClick: handleQuestionChange,\n            className: \"next-button\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: errorMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), quesNumber === quizData.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleResult,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Quiz, \"ghx2G0U6XDKc3fRVHS8L85XQJnI=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/kasir/OneDrive/Documents/srilatha kasireddy/Quizme-frontend/client/src/components/Quiz.jsx"],"names":["React","useState","useEffect","useNavigate","useLocation","Loader","jwt","Quiz","navigate","location","quizData","state","quizId","quesNumber","setQuesNumber","answers","setAnswers","error","setError","errorMsg","setErrorMsg","loading","setLoading","score","token","localStorage","getItem","data","decode","email","removeItem","Date","now","exp","handleQuestionChange","event","preventDefault","target","name","length","handleQuestionSubmit","handleResult","myScore","Object","keys","map","answer","index","correct_answers","correctAnswer","req","fetch","method","headers","body","JSON","stringify","json","status","pathname","message","question","console","log","key"],"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import Loader from \"react-loader-spinner\";\r\n// import jwt from \"jsonwebtoken\";\r\n// import \"./Quiz.css\";\r\n\r\n// function Quiz() {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n//   const quizData = location.state.quizData;\r\n//   const quizId = location.state.quizId;\r\n//   const [quesNumber, setQuesNumber] = useState(0);\r\n//   const [answers, setAnswers] = useState({});\r\n//   const [error, setError] = useState(false);\r\n//   const [errorMsg, setErrorMsg] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n//   let score = 0;\r\n\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem(\"token\");\r\n//     if (token) {\r\n//       const data = jwt.decode(token);\r\n//       if (!data.email) {\r\n//         localStorage.removeItem(\"token\");\r\n//         navigate(\"/login\");\r\n//       }\r\n//       if (Date.now() > jwt.decode(token).exp * 1000) {\r\n//         localStorage.removeItem(\"token\");\r\n//         navigate(\"/login\");\r\n//       }\r\n//     } else {\r\n//       localStorage.removeItem(\"token\");\r\n//       navigate(\"/login\");\r\n//     }\r\n//   }, []);\r\n\r\n//   function handleQuestionChange(event) {\r\n//     event.preventDefault();\r\n//     if (event.target.name === \"prev\" && quesNumber > 0) {\r\n//       setQuesNumber(quesNumber - 1);\r\n//     }\r\n//     if (event.target.name === \"next\" && quesNumber < quizData.length - 1) {\r\n//       setQuesNumber(quesNumber + 1);\r\n//     }\r\n//   }\r\n\r\n//   function handleQuestionSubmit(event) {\r\n//     setAnswers({ ...answers, [quesNumber]: event.target.name });\r\n//   }\r\n\r\n//   async function handleResult() {\r\n//     let myScore = 0;\r\n//     setLoading(true);\r\n//     Object.keys(answers).map((answer, index) => {\r\n//       Object.keys(quizData[index].correct_answers).map((correctAnswer) => {\r\n//         if (\r\n//           quizData[index].correct_answers[correctAnswer] === \"true\" &&\r\n//           answers[answer] + \"_correct\" === correctAnswer\r\n//         ) {\r\n//           myScore += 1;\r\n//         }\r\n//       });\r\n//     });\r\n//     score = score + myScore;\r\n\r\n//     const req = await fetch(\"http://localhost:5000/api/result\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         \"x-auth-token\": localStorage.getItem(\"token\"),\r\n//       },\r\n//       body: JSON.stringify({\r\n//         quizId: quizId,\r\n//         score: score,\r\n//       }),\r\n//     });\r\n\r\n//     const data = await req.json();\r\n//     setLoading(false);\r\n//     if (data.status === \"ok\") {\r\n//       navigate({\r\n//         pathname: \"/result\",\r\n//         state: { quizId: quizId },\r\n//       });\r\n//     } else {\r\n//       setError(true);\r\n//       setErrorMsg(data.message);\r\n//       return;\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       {loading ? (\r\n//         <Loader\r\n//           className=\"loader\"\r\n//           type=\"Grid\"\r\n//           color=\"#fff\"\r\n//           height={100}\r\n//           width={100}\r\n//         />\r\n//       ) : (\r\n//         <div>\r\n//           <h1 className=\"heading\">Quiz App</h1>\r\n//           <div className=\"question-form\">\r\n//             <div className=\"question\">\r\n//               {quesNumber + 1}. {quizData[quesNumber].question}\r\n//             </div>\r\n//             {Object.keys(quizData[quesNumber].answers).map((key) => {\r\n//               if (quizData[quesNumber].answers[key] !== null)\r\n//                 return (\r\n//                   <div className=\"option\" key={key}>\r\n//                     <input\r\n//                       type=\"radio\"\r\n//                       name={key}\r\n//                       value={quizData[quesNumber].answers[key]}\r\n//                       checked={answers[quesNumber] === key}\r\n//                       onChange={handleQuestionSubmit}\r\n//                     />\r\n//                     <label htmlFor={key}>\r\n//                       {quizData[quesNumber].answers[key]}\r\n//                     </label>\r\n//                   </div>\r\n//                 );\r\n//             })}\r\n//             <div className=\"btns\">\r\n//               <button\r\n//                 name=\"prev\"\r\n//                 onClick={handleQuestionChange}\r\n//                 className=\"prev-button\"\r\n//               >\r\n//                 Previous\r\n//               </button>\r\n//               <button\r\n//                 name=\"next\"\r\n//                 onClick={handleQuestionChange}\r\n//                 className=\"next-button\"\r\n//               >\r\n//                 Next\r\n//               </button>\r\n//             </div>\r\n//             {error && <div className=\"error\">{errorMsg}</div>}\r\n//           </div>\r\n//           {quesNumber === quizData.length - 1 && (\r\n//             <button className=\"submit-button\" onClick={handleResult}>\r\n//               Submit\r\n//             </button>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Quiz;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport \"./Quiz.css\";\r\n\r\nfunction Quiz() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  // const quizData = location.state.quizData;\r\n  // const quizId = location.state.quizId;\r\n  const quizData = location.state\r\n  const quizId = location.state\r\n  const [quesNumber, setQuesNumber] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n  const [error, setError] = useState(false);\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  let score = 0;\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      const data = jwt.decode(token);\r\n      if (!data.email) {\r\n        localStorage.removeItem(\"token\");\r\n       navigate(\"/login\");\r\n      }\r\n      if (Date.now() > jwt.decode(token).exp * 1000) {\r\n        localStorage.removeItem(\"token\");\r\n        navigate(\"/login\");\r\n      }\r\n    } else {\r\n      localStorage.removeItem(\"token\");\r\n      navigate(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  function handleQuestionChange(event) {\r\n    event.preventDefault();\r\n    if (event.target.name === \"prev\" && quesNumber > 0) {\r\n      setQuesNumber(quesNumber - 1);\r\n    }\r\n    if (event.target.name === \"next\" && quesNumber < quizData.length - 1) {\r\n      setQuesNumber(quesNumber + 1);\r\n    }\r\n  }\r\n\r\n  function handleQuestionSubmit(event) {\r\n    setAnswers({ ...answers, [quesNumber]: event.target.name });\r\n  }\r\n\r\n  async function handleResult() {\r\n    const navigate =useNavigate\r\n    let myScore = 0;\r\n    setLoading(true);\r\n    Object.keys(answers).map((answer, index) => {\r\n      Object.keys(quizData[index].correct_answers).map((correctAnswer) => {\r\n        if (\r\n          quizData[index].correct_answers[correctAnswer] === \"true\" &&\r\n          answers[answer] + \"_correct\" === correctAnswer\r\n        ) {\r\n          myScore += 1;\r\n        }\r\n      });\r\n    });\r\n    score = score + myScore;\r\n\r\n    const req = await fetch(\"http://localhost:5000/api/result\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-auth-token\": localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({\r\n        quizId: quizId,\r\n        score: score,\r\n      }),\r\n    });\r\n\r\n    const data = await req.json();\r\n    setLoading(false);\r\n    if (data.status === \"ok\") {\r\n      navigate({\r\n        pathname: \"/result\",\r\n        state: { quizId: quizId },\r\n      });\r\n    } else {\r\n      setError(true);\r\n      setErrorMsg(data.message);\r\n      return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <Loader\r\n          className=\"loader\"\r\n          type=\"Grid\"\r\n          color=\"#fff\"\r\n          height={100}\r\n          width={100}\r\n        />\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"heading\">The Programmer's Quiz 👩‍💻</h1>\r\n          <div className=\"question-form\">\r\n            <div className=\"question\">\r\n              {quesNumber + 1}. {quizData[quesNumber].question}\r\n              {console.log(quizData,\"hello\")}\r\n            </div>\r\n            {Object.keys(quizData[quesNumber].answers).map((key) => {\r\n              if (quizData[quesNumber].answers[key] !== null)\r\n                return (\r\n                  <div className=\"option\" key={key}>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name={key}\r\n                      value={quizData[quesNumber].answers[key]}\r\n                      checked={answers[quesNumber] === key}\r\n                      onChange={handleQuestionSubmit}\r\n                    />\r\n                    <label htmlFor={key}>\r\n                      {quizData[quesNumber].answers[key]}\r\n                    </label>\r\n                  </div>\r\n                );\r\n            })}\r\n            <div className=\"btns\">\r\n              <button\r\n                name=\"prev\"\r\n                onClick={handleQuestionChange}\r\n                className=\"prev-button\"\r\n              >\r\n                Previous\r\n              </button>\r\n              <button\r\n                name=\"next\"\r\n                onClick={handleQuestionChange}\r\n                className=\"next-button\"\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n            {error && <div className=\"error\">{errorMsg}</div>}\r\n          </div>\r\n          {quesNumber === quizData.length - 1 && (\r\n            <button className=\"submit-button\" onClick={handleResult}>\r\n              Submit\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n"]},"metadata":{},"sourceType":"module"}